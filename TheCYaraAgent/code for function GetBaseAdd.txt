	// get the base address of a process
	LPMODULEINFO GetBaseAdd(HANDLE hProcess)
	{
		LPMODULEINFO lpModuleInfo = static_cast<LPMODULEINFO>(malloc(sizeof(MODULEINFO)));
		LPSTR lpImageFileName = static_cast<LPSTR>(malloc(256));
		HMODULE hModuleArr[100]; /* holds all the modules handles */
		DWORD cnNeeded; /* size needed to store all modules in bytes */
		WCHAR ModuleName[256]; /* holds the module name */
		
		// get the module name :
		if (!(GetProcessImageFileNameA(hProcess, lpImageFileName, 256)))
			printf("error while getting the image file name. %d\n", GetLastError());


		// get all modules used by the process.
		bool status = EnumProcessModules(hProcess, hModuleArr, sizeof(hModuleArr), &cnNeeded);

		if (!status)
		{
			printf("error bro while using EnumProcessModules. %d\n", GetLastError());
			return nullptr;
		}
		// check the size of array needed and the porvided:
		if (cnNeeded > (sizeof(hModuleArr) * sizeof(HANDLE)))
		{
			printf("you need more size for the array of modules bro. the size of array : %d, and size needed is %d\n", sizeof(hModuleArr), cnNeeded / sizeof(HMODULE));
			return nullptr;
		}
		
		/************* convert from LPSTR to WCHAR *************/

		int lenLpstr = MultiByteToWideChar(CP_ACP, 0, lpImageFileName, -1, NULL, 0);

		WCHAR* wcharFileName = new WCHAR[lenLpstr];

		MultiByteToWideChar(CP_ACP, 0, lpImageFileName, lenLpstr, wcharFileName, lenLpstr);


		// loop to find the main module of the image:
		for (int i = 0; i < (cnNeeded / sizeof(HMODULE)); i++)
		{
			// Get the module name:
			GetModuleBaseName(hProcess, hModuleArr[i], ModuleName, 256); /*name*/

			if( wcsstr(wcharFileName, ModuleName) != NULL)
			{
				printf("found the image brother. they are %ws, %ws\n", ModuleName, wcharFileName);
				GetModuleInformation(hProcess, hModuleArr[i], lpModuleInfo, sizeof(MODULEINFO));
				//printf("the module base address is 0x%p, entry point 0x%p, and size is %d\n", lpModuleInfo->lpBaseOfDll, lpModuleInfo->EntryPoint, lpModuleInfo->SizeOfImage);
				return lpModuleInfo; /* return the base address */
			}
		}

		printf("can't find the module name.\n");
		return nullptr;

	}
